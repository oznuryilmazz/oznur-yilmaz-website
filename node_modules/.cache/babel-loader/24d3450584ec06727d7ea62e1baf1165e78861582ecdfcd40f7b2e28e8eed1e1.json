{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar jsxRuntime = require('react/jsx-runtime');\nvar React = require('react');\nvar Controller = require('./Controller.js');\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\n/**\n * `AccessibilityOrientation` definition used for the `SliderProps.orientation` prop.\n * Used to define which swipes (depending on directions) will change the slides,\n * and where and how will the buttons render, if set to render.\n */\nexports.AccessibilityOrientation = void 0;\n(function (AccessibilityOrientation) {\n  AccessibilityOrientation[\"VERTICAL\"] = \"vertical\";\n  AccessibilityOrientation[\"HORIZONTAL\"] = \"horizontal\";\n})(exports.AccessibilityOrientation || (exports.AccessibilityOrientation = {}));\nconst defaultProps = {\n  shouldDisplayButtons: true,\n  shouldSlideOnArrowKeypress: true,\n  orientation: exports.AccessibilityOrientation.HORIZONTAL,\n  thresholdToSlide: 50\n};\nconst AccessibilityStateContext = React__default[\"default\"].createContext(undefined);\nfunction accessibilityReducer(state, action) {\n  switch (action.type) {\n    case 'start-motion':\n      {\n        return {\n          initialX: action.payload.x,\n          initialY: action.payload.y,\n          currentX: undefined,\n          currentY: undefined\n        };\n      }\n    case 'update-motion':\n      {\n        return {\n          initialX: state.initialX,\n          initialY: state.initialY,\n          currentX: action.payload.x,\n          currentY: action.payload.y\n        };\n      }\n    case 'end-motion':\n      {\n        return {\n          initialX: undefined,\n          initialY: undefined,\n          currentX: undefined,\n          currentY: undefined\n        };\n      }\n    default:\n      {\n        throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n      }\n  }\n}\nfunction AccessibilityProvider({\n  children,\n  accessibility\n}) {\n  var _a, _b, _c;\n  const params = {\n    shouldDisplayButtons: (_a = accessibility === null || accessibility === void 0 ? void 0 : accessibility.shouldDisplayButtons) !== null && _a !== void 0 ? _a : defaultProps.shouldDisplayButtons,\n    shouldSlideOnArrowKeypress: (_b = accessibility === null || accessibility === void 0 ? void 0 : accessibility.shouldSlideOnArrowKeypress) !== null && _b !== void 0 ? _b : defaultProps.shouldSlideOnArrowKeypress,\n    orientation: (accessibility === null || accessibility === void 0 ? void 0 : accessibility.orientation) || defaultProps.orientation,\n    thresholdToSlide: (_c = accessibility === null || accessibility === void 0 ? void 0 : accessibility.thresholdToSlide) !== null && _c !== void 0 ? _c : defaultProps.thresholdToSlide\n  };\n  const [state, dispatch] = React__default[\"default\"].useReducer(accessibilityReducer, {\n    initialX: undefined,\n    initialY: undefined,\n    currentX: undefined,\n    currentY: undefined\n  });\n  const {\n    goToNextSlide,\n    goToPreviousSlide\n  } = Controller.useController();\n  /**\n   * Sets the initial coordinates of the touch event.\n   */\n  const onTouchStartHandler = event => {\n    dispatch({\n      type: 'start-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n  /**\n   * Sets the current coordinates of the touch event to the state.\n   */\n  const onTouchMoveHandler = event => {\n    dispatch({\n      type: 'update-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n  /**\n   * Determines in which direction **and** sense (vector) the user is swiping.\n   * Animations are then set accordingly depending on which direction the user is dragging and the slide is changed.\n   * Finally the touch state is set back to the initial state, where everything is undefined.\n   */\n  const onTouchEndHandler = () => {\n    const diffX = Number(state.initialX) - Number(state.currentX);\n    const diffY = Number(state.initialY) - Number(state.currentY);\n    const isSlidingHorizontally = Math.abs(diffX) > Math.abs(diffY);\n    const isSliderSetHorizontally = params.orientation === exports.AccessibilityOrientation.HORIZONTAL;\n    const isSliderSetVertically = params.orientation === exports.AccessibilityOrientation.VERTICAL;\n    if (isSlidingHorizontally && isSliderSetHorizontally && Math.abs(diffX) >= params.thresholdToSlide) {\n      const isSwipingRight = diffX > 0;\n      if (isSwipingRight) goToNextSlide();else goToPreviousSlide();\n    } else if (!isSlidingHorizontally && isSliderSetVertically && Math.abs(diffY) >= params.thresholdToSlide) {\n      const isSwipingUp = diffY > 0;\n      if (isSwipingUp) goToNextSlide();else goToPreviousSlide();\n    }\n    dispatch({\n      type: 'end-motion'\n    });\n  };\n  const onArrowKeypressHandler = e => {\n    if (!params.shouldSlideOnArrowKeypress) return;\n    const code = e.key || e.code || e.keyCode;\n    const isHorizontal = params.orientation === exports.AccessibilityOrientation.HORIZONTAL;\n    switch (true) {\n      // Left keypress.\n      case isHorizontal && (code === 'ArrowLeft' || code === 37):\n        goToPreviousSlide();\n        break;\n      // Right keypress.\n      case isHorizontal && (code === 'ArrowRight' || code === 39):\n        goToNextSlide();\n        break;\n      // Up keypress.\n      case !isHorizontal && (code === 'ArrowUp' || code === 38):\n        goToPreviousSlide();\n        break;\n      // Down keypress.\n      case !isHorizontal && (code === 'ArrowDown' || code === 40):\n        goToNextSlide();\n        break;\n    }\n  };\n  /**\n   * After mounting, similar to `componentDidMount`, setup the window event listeners for keydowns. The event handlers will be changing the slides if enabled to do so.\n   */\n  React__default[\"default\"].useEffect(() => {\n    window.addEventListener('keydown', onArrowKeypressHandler);\n    /**\n     * Clearing any existing timeouts to avoid memory leaks, and clear event listener.\n     */\n    return () => {\n      window.removeEventListener('keydown', onArrowKeypressHandler);\n    };\n  }, [onArrowKeypressHandler]);\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    shouldDisplayButtons: params.shouldDisplayButtons,\n    orientation: params.orientation,\n    onTouchStartHandler,\n    onTouchMoveHandler,\n    onTouchEndHandler\n  };\n  return jsxRuntime.jsx(AccessibilityStateContext.Provider, Object.assign({\n    value: value\n  }, {\n    children: children\n  }));\n}\nfunction useAccessibility() {\n  const context = React__default[\"default\"].useContext(AccessibilityStateContext);\n  if (context === undefined) {\n    throw new Error('useAccessibility must be used within a AccessibilityProvider');\n  }\n  return context;\n}\nexports.AccessibilityProvider = AccessibilityProvider;\nexports.useAccessibility = useAccessibility;","map":{"version":3,"names":["exports","AccessibilityOrientation","defaultProps","shouldDisplayButtons","shouldSlideOnArrowKeypress","orientation","HORIZONTAL","thresholdToSlide","AccessibilityStateContext","React__default","createContext","undefined","accessibilityReducer","state","action","type","initialX","payload","x","initialY","y","currentX","currentY","Error","JSON","stringify","AccessibilityProvider","children","accessibility","params","_a","_b","_c","dispatch","useReducer","goToNextSlide","goToPreviousSlide","Controller","useController","onTouchStartHandler","event","touches","clientX","clientY","onTouchMoveHandler","onTouchEndHandler","diffX","Number","diffY","isSlidingHorizontally","Math","abs","isSliderSetHorizontally","isSliderSetVertically","VERTICAL","isSwipingRight","isSwipingUp","onArrowKeypressHandler","e","code","key","keyCode","isHorizontal","useEffect","window","addEventListener","removeEventListener","value","jsxRuntime","jsx","Provider","Object","assign","useAccessibility","context","useContext"],"sources":["C:\\Users\\OznurYilmaz\\Desktop\\oznur-yilmaz-website\\oznur-yilmaz-website\\node_modules\\hero-slider\\src\\modules\\Accessibility.tsx"],"sourcesContent":["import React from 'react';\n\nimport { useController } from './Controller';\n\n/**\n * `AccessibilityOrientation` definition used for the `SliderProps.orientation` prop.\n * Used to define which swipes (depending on directions) will change the slides,\n * and where and how will the buttons render, if set to render.\n */\nexport enum AccessibilityOrientation {\n  VERTICAL = 'vertical',\n  HORIZONTAL = 'horizontal'\n}\n\nexport interface AccessibilityProps {\n  /**\n   * Controls render of the next and previous buttons.\n   * @default true\n   */\n  shouldDisplayButtons?: boolean;\n  /**\n   * When an arrow key is pressed, the active slide will change respectively to the pressed arrow.\n   * The left and down arrows will set the previous slide, and the right and up arrows will set the next slide.\n   * The left and right will only work if the slider is horizontal, and the up and down arrows will only work if the slider is vertical.\n   * @default true\n   */\n  shouldSlideOnArrowKeypress?: boolean;\n  /**\n   * The slider orientation can either set to be `horizontal` or `vertical`.\n   * The orientation sets the slide buttons respective to the orientation (e.g. if vertical, the buttons will be at the top and at the bottom).\n   * Swipe (touch) gestures in mobile devices to change slides will also be configured automatically depending on the orientation (e.g. if horizontal, swiping vertically won't change slides).\n   * @default 'horizontal'\n   */\n  orientation?: `${AccessibilityOrientation}`;\n  /**\n   * Pixel threshold for the Slider to register a swiping command to change slides.\n   * @default 50\n   */\n  thresholdToSlide?: number;\n}\n\ntype Action =\n  | {\n      type: 'start-motion';\n      payload: { x: number; y: number };\n    }\n  | {\n      type: 'update-motion';\n      payload: { x: number; y: number };\n    }\n  | { type: 'end-motion' };\ntype State = {\n  initialX: number | undefined;\n  initialY: number | undefined;\n  currentX: number | undefined;\n  currentY: number | undefined;\n};\ntype ProviderProps = React.PropsWithChildren<{\n  accessibility?: AccessibilityProps;\n}>;\n\nconst defaultProps: Required<AccessibilityProps> = {\n  shouldDisplayButtons: true,\n  shouldSlideOnArrowKeypress: true,\n  orientation: AccessibilityOrientation.HORIZONTAL,\n  thresholdToSlide: 50\n};\n\nconst AccessibilityStateContext = React.createContext<\n  | {\n      state: State;\n      shouldDisplayButtons: boolean;\n      orientation: AccessibilityOrientation;\n      onTouchStartHandler: (event: React.TouchEvent<HTMLDivElement>) => void;\n      onTouchMoveHandler: (event: React.TouchEvent<HTMLDivElement>) => void;\n      onTouchEndHandler: () => void;\n    }\n  | undefined\n>(undefined);\n\nfunction accessibilityReducer(state: State, action: Action): State {\n  switch (action.type) {\n    case 'start-motion': {\n      return {\n        initialX: action.payload.x,\n        initialY: action.payload.y,\n        currentX: undefined,\n        currentY: undefined\n      };\n    }\n    case 'update-motion': {\n      return {\n        initialX: state.initialX,\n        initialY: state.initialY,\n        currentX: action.payload.x,\n        currentY: action.payload.y\n      };\n    }\n    case 'end-motion': {\n      return {\n        initialX: undefined,\n        initialY: undefined,\n        currentX: undefined,\n        currentY: undefined\n      };\n    }\n    default: {\n      throw new Error(`Unhandled action: [${JSON.stringify(action, null, 2)}]`);\n    }\n  }\n}\n\nfunction AccessibilityProvider({ children, accessibility }: ProviderProps) {\n  const params: Required<AccessibilityProps> = {\n    shouldDisplayButtons:\n      accessibility?.shouldDisplayButtons ?? defaultProps.shouldDisplayButtons,\n    shouldSlideOnArrowKeypress:\n      accessibility?.shouldSlideOnArrowKeypress ??\n      defaultProps.shouldSlideOnArrowKeypress,\n    orientation: accessibility?.orientation || defaultProps.orientation,\n    thresholdToSlide:\n      accessibility?.thresholdToSlide ?? defaultProps.thresholdToSlide\n  };\n\n  const [state, dispatch] = React.useReducer(accessibilityReducer, {\n    initialX: undefined,\n    initialY: undefined,\n    currentX: undefined,\n    currentY: undefined\n  } as State);\n\n  const { goToNextSlide, goToPreviousSlide } = useController();\n\n  /**\n   * Sets the initial coordinates of the touch event.\n   */\n  const onTouchStartHandler = (event: React.TouchEvent<HTMLDivElement>) => {\n    dispatch({\n      type: 'start-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n\n  /**\n   * Sets the current coordinates of the touch event to the state.\n   */\n  const onTouchMoveHandler = (event: React.TouchEvent<HTMLDivElement>) => {\n    dispatch({\n      type: 'update-motion',\n      payload: {\n        x: event.touches[0].clientX,\n        y: event.touches[0].clientY\n      }\n    });\n  };\n\n  /**\n   * Determines in which direction **and** sense (vector) the user is swiping.\n   * Animations are then set accordingly depending on which direction the user is dragging and the slide is changed.\n   * Finally the touch state is set back to the initial state, where everything is undefined.\n   */\n  const onTouchEndHandler = () => {\n    const diffX = Number(state.initialX) - Number(state.currentX);\n    const diffY = Number(state.initialY) - Number(state.currentY);\n\n    const isSlidingHorizontally: boolean = Math.abs(diffX) > Math.abs(diffY);\n    const isSliderSetHorizontally: boolean =\n      params.orientation === AccessibilityOrientation.HORIZONTAL;\n    const isSliderSetVertically: boolean =\n      params.orientation === AccessibilityOrientation.VERTICAL;\n\n    if (\n      isSlidingHorizontally &&\n      isSliderSetHorizontally &&\n      Math.abs(diffX) >= params.thresholdToSlide\n    ) {\n      const isSwipingRight = diffX > 0;\n      if (isSwipingRight) goToNextSlide();\n      else goToPreviousSlide();\n    } else if (\n      !isSlidingHorizontally &&\n      isSliderSetVertically &&\n      Math.abs(diffY) >= params.thresholdToSlide\n    ) {\n      const isSwipingUp = diffY > 0;\n      if (isSwipingUp) goToNextSlide();\n      else goToPreviousSlide();\n    }\n\n    dispatch({ type: 'end-motion' });\n  };\n\n  const onArrowKeypressHandler = (e: KeyboardEvent): void => {\n    if (!params.shouldSlideOnArrowKeypress) return;\n\n    const code = e.key || e.code || e.keyCode;\n\n    const isHorizontal =\n      params.orientation === AccessibilityOrientation.HORIZONTAL;\n\n    switch (true) {\n      // Left keypress.\n      case isHorizontal && (code === 'ArrowLeft' || code === 37):\n        goToPreviousSlide();\n        break;\n      // Right keypress.\n      case isHorizontal && (code === 'ArrowRight' || code === 39):\n        goToNextSlide();\n        break;\n      // Up keypress.\n      case !isHorizontal && (code === 'ArrowUp' || code === 38):\n        goToPreviousSlide();\n        break;\n      // Down keypress.\n      case !isHorizontal && (code === 'ArrowDown' || code === 40):\n        goToNextSlide();\n        break;\n      default: // Do nothing.\n    }\n  };\n\n  /**\n   * After mounting, similar to `componentDidMount`, setup the window event listeners for keydowns. The event handlers will be changing the slides if enabled to do so.\n   */\n  React.useEffect(() => {\n    window.addEventListener('keydown', onArrowKeypressHandler);\n    /**\n     * Clearing any existing timeouts to avoid memory leaks, and clear event listener.\n     */\n    return () => {\n      window.removeEventListener('keydown', onArrowKeypressHandler);\n    };\n  }, [onArrowKeypressHandler]);\n\n  // NOTE: you *might* need to memoize this value\n  // Learn more in http://kcd.im/optimize-context\n  const value = {\n    state,\n    shouldDisplayButtons: params.shouldDisplayButtons,\n    orientation: params.orientation as AccessibilityOrientation,\n    onTouchStartHandler,\n    onTouchMoveHandler,\n    onTouchEndHandler\n  };\n\n  return (\n    <AccessibilityStateContext.Provider value={value}>\n      {children}\n    </AccessibilityStateContext.Provider>\n  );\n}\n\nfunction useAccessibility() {\n  const context = React.useContext(AccessibilityStateContext);\n\n  if (context === undefined) {\n    throw new Error(\n      'useAccessibility must be used within a AccessibilityProvider'\n    );\n  }\n\n  return context;\n}\n\nexport { AccessibilityProvider, useAccessibility };\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}